# -*- coding: utf-8 -*-
"""Streamlit_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-I1N_QaaKpn0KJhZZbwoOGES5rH58jb9
"""

# streamlit_app.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.cluster import KMeans
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

st.set_page_config(layout="wide")
st.title("Dashboard COVID-19 Indonesia")

# Load data
@st.cache_data
def load_data():
    df = pd.read_csv("covid_19_indonesia_time_series_all.csv")

    # Bersihkan kolom Case Fatality Rate
    df['Case Fatality Rate'] = df['Case Fatality Rate'].astype(str)
    df['Case Fatality Rate'] = df['Case Fatality Rate'].str.replace('%', '', regex=False).str.strip()
    df['Case Fatality Rate'] = pd.to_numeric(df['Case Fatality Rate'], errors='coerce') / 100.0

    # Pilih kolom penting
    df = df[['Date', 'Location', 'Total Cases', 'Total Deaths', 'Total Recovered',
             'Population Density', 'Case Fatality Rate']].dropna()

    return df

df = load_data()

# -----------------------------
# Supervised Learning (Regresi)
# -----------------------------
st.header("ðŸ“ˆ Supervised Learning: Prediksi Total Kasus")

# Fitur dan target
X = df[['Total Deaths', 'Total Recovered', 'Population Density', 'Case Fatality Rate']]
y = df['Total Cases']

# Bagi data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model regresi
model = LinearRegression()
model.fit(X_train, y_train)

# Prediksi
y_pred = model.predict(X_test)

# Evaluasi
st.write("**RÂ² Score:**", r2_score(y_test, y_pred))

# Hitung RMSE tanpa parameter squared
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
st.write("**RMSE:**", rmse)

# -----------------------------
# Unsupervised Learning (Clustering)
# -----------------------------
st.header("Unsupervised Learning: Clustering Lokasi")

# Agregasi per lokasi
df_grouped = df.groupby('Location').agg({
    'Total Cases': 'max',
    'Total Deaths': 'max',
    'Total Recovered': 'max',
    'Population Density': 'mean'
}).reset_index()

# KMeans
kmeans = KMeans(n_clusters=4, random_state=0)
df_grouped['Cluster'] = kmeans.fit_predict(df_grouped.iloc[:, 1:])

# Tampilkan peta clustering
fig_map = px.scatter_geo(df_grouped,
                         locations="Location",
                         locationmode="country names",
                         color="Cluster",
                         hover_name="Location",
                         title="Clustering Wilayah berdasarkan Kasus & Kepadatan")

st.plotly_chart(fig_map, use_container_width=True)

# -----------------------------
# Grafik Tren Harian
# -----------------------------
st.header("Grafik Tren Harian COVID-19")

selected_location = st.selectbox("Pilih Lokasi", df['Location'].unique())
df_location = df[df['Location'] == selected_location]

fig_trend = px.line(df_location, x='Date', y='Total Cases', title=f"Tren Kasus Harian di {selected_location}")
st.plotly_chart(fig_trend, use_container_width=True)

# -----------------------------
# Ringkasan Risiko Wilayah
# -----------------------------
st.header("Ringkasan Risiko Wilayah")

df_risk = df[['Location', 'Case Fatality Rate']].dropna()
df_risk = df_risk.groupby('Location').mean().reset_index()

df_risk['Risk Level'] = pd.cut(df_risk['Case Fatality Rate'],
                               bins=[0, 0.01, 0.03, 1],
                               labels=['Low', 'Medium', 'High'])

st.subheader("Tabel Ringkasan Risiko")
st.dataframe(df_risk)

risk_counts = df_risk['Risk Level'].value_counts().sort_index()
fig_risk = px.bar(risk_counts,
                  x=risk_counts.index,
                  y=risk_counts.values,
                  labels={'x':'Risk Level', 'y':'Jumlah Lokasi'},
                  title='Ringkasan Risiko Wilayah Berdasarkan Case Fatality Rate')

st.plotly_chart(fig_risk)
